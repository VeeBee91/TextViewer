@page "/35DC6E98-334D-4F26-A5DD-07AB233EA3A8"
@using System.Diagnostics
@using Microsoft.AspNetCore.DataProtection
@using Ljbc1994.Blazor.IntersectionObserver
@using Ljbc1994.Blazor.IntersectionObserver.Components
@inject IIntersectionObserverService ObserverService
@inject IDataProtectionProvider Provider
@inject NavigationManager NavManager
@attribute [Authorize]

<PageTitle>Nen uitleg</PageTitle>
@foreach (var t in data)
{
    <IntersectionObserve>
        @if (darkMode)
        {
            <div @ref=context.Ref.Current style=@(context.IsIntersecting ? "color:white": "color:#122027")>
                @((MarkupString) t)
            </div>
        }
        else
        {
             <div @ref=context.Ref.Current style=@(context.IsIntersecting ? "color:black": "color:white")>
                @((MarkupString) t)
            </div> 
        }
    </IntersectionObserve>
}

<div @ref="preloadReference">
    <br />
</div>

<div>
            @((MarkupString) placeholderText)
</div>



@code {

    public ElementReference preloadReference { get; set; }
    public bool IsIntersecting { get; set; }
    private static Queue<string> queue = new();
    private static List<string> data = new();
    public string previousText = "";
    public string placeholderText = "<br />";
    public bool top = false;
    public bool ponr = false;
    public string speedReading = "Ik hoop da ge goe aant leze zijt (ni speedreading of doorscrollen), want het lijkt erop da ge vreed rap aant scrolle zijt. Dees automatisch tekstje is ni deel van hetgeen ik had geschreve ma verschijnt dus als ik denk da het wa rap ga. Gewoon terug een beetje naar bove (todat deze tekstblok ongeveer onzichtbaar is) scrolle en dan kunt ge voort.";
    private TimeSpan lastItem = new(0);
    private Stopwatch sw = new();
    private bool darkMode = false;
    private int count = 10;

    private async Task OnIntersectingChanged()
    {
        if (lastItem.Add(TimeSpan.FromMilliseconds(4000)) > sw.Elapsed && (!ponr))
        {
            if (placeholderText.Contains(speedReading))
                return;
            placeholderText = speedReading;
            Logic.Log("Speedreading triggered. SW: " + sw.Elapsed + " & lastItemTime: " + lastItem);
        }
        else
        {
            placeholderText = "<br />";
            var s = queue.Peek();
            if (s.Length < 20)
                Logic.Log("Intersection passed after " + sw.Elapsed + ". Current item is \"" + s + "\" and remainging count is " + queue.Count + ".");
            else
                Logic.Log("Intersection passed after " + sw.Elapsed + ". Current item is \"" + s.Substring(0, 20) + "\" and remainging count is " + queue.Count + ".");
            if (ponr)
            {
                int i = 7;
                while (queue.ToArray()[i] == "<br />")
                    i++;
                if (data.Contains(queue.ToArray()[i]))
                {
                    queue = await Logic.ReadAndProcessSource(Provider);
                    Logic.Log("PONR already passed in IntersectingChanged.");
                    queue.Dequeue();
                    ponr = true;
                    var t = Logic.AppendArray(queue, queue.Count);
                    data = t.Item1;
                    NavManager.NavigateTo("35DC6E98-334D-4F26-A5DD-07AB233EA3A8", true);
                    if (sw.IsRunning)
                        sw.Stop();
                }
                else
                {
                    await Logic.ClearSource(queue, Provider);
                    var t = Logic.AppendArray(queue, count + 2, data);
                    data = t.Item1;
                }
            }
            else if (queue.Count > count)
            {
                await Logic.ClearSource(queue, Provider);
                var t = Logic.AppendArray(queue, count, data);
                data = t.Item1;
                if (t.Item2)
                {
                    ponr = true;
                    Logic.Log("Ponr passed.");
                }
                if (sw.IsRunning)
                    lastItem = sw.Elapsed;
                if (ponr)
                    lastItem = TimeSpan.FromSeconds(1);
            }
            else if (queue.Count > 0)
            {
                var t = Logic.AppendArray(queue, queue.Count, data);
                data = t.Item1;
                sw.Stop();
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            queue = await Logic.ReadAndProcessSource(Provider);
            if (queue.Peek().Contains("---------------------------------------"))
            {
                Logic.Log("PONR already passed on afterRender.");
                queue.Dequeue();
                ponr = true;
                var t = Logic.AppendArray(queue, queue.Count);
                data = t.Item1;
            }
            else
            {
                Logic.Log("Loading first 20 lines.");
                var t = Logic.AppendArray(queue, 20);
                data = t.Item1;
                sw.Start();
                IntersectionObserverOptions ObserverOptions = new IntersectionObserverOptions
                    {
                        Threshold = new List<double> { 0 },
                        //RootMargin = "10px 0px 0px 0px"
                    };

                await SetupObserver(preloadReference, ObserverOptions);
            }

        }
    }

    protected override async Task OnInitializedAsync()
    {
        Logic.Log("Reader start.");
        darkMode = await Logic.DarkMode();
#if DEBUG
        darkMode = true;
#endif
    }


    public async Task SetupObserver(ElementReference reference, IntersectionObserverOptions options)
    {
        await ObserverService.Observe(reference, async (entries) =>
        {
            var entry = entries.FirstOrDefault();
            IsIntersecting = entry.IsIntersecting;
            await OnIntersectingChanged();
            StateHasChanged();

        }, options);
    }
}

@if (darkMode)
{
    <style>
        body {
        background-color: #122027; 
        color:white;
        }
    </style>
}

